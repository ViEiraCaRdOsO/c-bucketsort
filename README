NAME
    bucketsort - bucket sort

SYNOPSIS
      #include "bucketsort.h"
      int bucketsort(
        void        **base,
        size_t        nmemb,
        keyaccessor_t key,
        indexer_t     idx,
        comparator_t  cmp
      );

DESCRIPTION
    The bucketsort() is an implementations of bucket sort.

  base
    The reference to the array of pointers to the element (or integers whose
    size equals to that of pointer) to be sorted in-place.

  nmemb
    The nember of elements in the array.

  key
    The function pointer which takes the reference to the array element and
    returns the reference to the key.

      void *key(void *element);

    When "NULL" the default function is used which is defined as:

      inline void *identity(void *v)
      {
        return v;
      }

  idx
    The function pointer which takes the reference to the key and the
    recursion level of the caller and returns the integer value between 0
    and 255, which is the bucket id.

    When "NULL" the default function is used which is defined as:

      inline int charAt(void *v, size_t i)
      {
        char *s = (char *) v;
        return s ? strlen(s) > i ? s[i] : 0 : 0;
      };

    In other words, default acts the same as the MSD radix sort with
    variable lengths.

  cmp
    The Function pointer which compares two keys. This is needed to allow
    elements with same keys. Its signature is the same as the one you pass
    to "qsort()", "mergesort()" and "heapsort()" in libc.

    When "NULL", it defaults to:

      inline int stringcmp(void *a, void *b)
      {
        return strcmp(a ? a : "", b ? b : "");
      }

EXAMPLE
    See main.c which is included in the distro.

IMPLEMENTATION DETAILS
    The bucket is implemented as a queue by linked lists. The whole array is
    converted to the linked list before sorted then written back to the
    array. If you like you can use the list sorter directly as:

      list_t bucketsort_l(
        list_t        src,
        size_t        nmemb,
        keyaccessor_t key
        indexer_t     idx,
        comparator_t  cmp
      );

    where:

      typedef struct {
        void *car, *cdr;
      } _cons_t, *list_t;

ACHILLES'S HEEL AND ITS SHIELD
    The obvious drawback of the recursive bucket sort is that it recurses
    deeply when it comes accross data (strings) with long common prefix.
    Given:

      aa..a  # "a" x n
      aa..aa # "a" x (n+1)

    It recurses n times.

    To cope with such cases, "bucketsort()" now falls back to the merge sort
    after "BUCKETSORT_DEPTH", 256 in bucketsort.h. The merge sort used there
    is defined as:

      list_t mergesort_l(
        list_t        src,
        comparator_t  cmp
      );

BENCHMARK
    1e7.txt is created as:

      perl -MList::Util=shuffle -lE 'say for shuffle 1..1e7' > 1e7.txt

  Mac OS X v10.7.2/iMac 12,2/Core i7
        % gcc -DQSORT -W -Wall -O2 benchmark.c
        % /usr/bin/time -l env LC_ALL=C ./a.out 1e7.txt > /dev/null
        5.49 real         5.34 user         0.15 sys
         243015680  maximum resident set size
                 0  average shared memory size
                 0  average unshared data size
                 0  average unshared stack size
             59460  page reclaims
                 0  page faults
                 0  swaps
                 0  block input operations
                 2  block output operations
                 0  messages sent
                 0  messages received
                 0  signals received
                 0  voluntary context switches
                42  involuntary context switches
        % gcc -DMERGESORT -W -Wall -O2 benchmark.c
        % /usr/bin/time -l env LC_ALL=C ./a.out 1e7.txt > /dev/null
                4.85 real         4.66 user         0.18 sys
         323014656  maximum resident set size
                 0  average shared memory size
                 0  average unshared data size
                 0  average unshared stack size
             79247  page reclaims
                 0  page faults
                 0  swaps
                 0  block input operations
                 0  block output operations
                 0  messages sent
                 0  messages received
                 0  signals received
                 0  voluntary context switches
                43  involuntary context switches
        % gcc -DHEAPSORT -W -Wall -O2 benchmark.c
        % /usr/bin/time -l env LC_ALL=C ./a.out 1e7.txt > /dev/null
               10.21 real        10.05 user         0.15 sys
         243011584  maximum resident set size
                 0  average shared memory size
                 0  average unshared data size
                 0  average unshared stack size
             59459  page reclaims
                 0  page faults
                 0  swaps
                 0  block input operations
                 0  block output operations
                 0  messages sent
                 0  messages received
                 0  signals received
                 0  voluntary context switches
                34  involuntary context switches
        % gcc -DRADIXSORT -W -Wall -O2 benchmark.c
        % /usr/bin/time -l env LC_ALL=C ./a.out 1e7.txt > /dev/null
            7.78 real         7.62 user         0.15 sys
         243023872  maximum resident set size
                 0  average shared memory size
                 0  average unshared data size
                 0  average unshared stack size
             59462  page reclaims
                 0  page faults
                 0  swaps
                 0  block input operations
                 1  block output operations
                 0  messages sent
                 0  messages received
                 0  signals received
                 0  voluntary context switches
                63  involuntary context switches
        % gcc -DSRADIXSORT -W -Wall -O2 benchmark.c
        % /usr/bin/time -l env LC_ALL=C ./a.out 1e7.txt > /dev/null
                7.68 real         7.48 user         0.19 sys
         323026944  maximum resident set size
                 0  average shared memory size
                 0  average unshared data size
                 0  average unshared stack size
             78994  page reclaims
                 0  page faults
                 0  swaps
                 0  block input operations
                 0  block output operations
                 0  messages sent
                 0  messages received
                 0  signals received
                 0  voluntary context switches
                44  involuntary context switches
        % gcc -W -Wall -O2 benchmark.c
        % /usr/bin/time -l env LC_ALL=C ./a.out 1e7.txt > /dev/null
                9.37 real         9.17 user         0.20 sys
         402980864  maximum resident set size
                 0  average shared memory size
                 0  average unshared data size
                 0  average unshared stack size
             98786  page reclaims
                 0  page faults
                 0  swaps
                 0  block input operations
                 2  block output operations
                 0  messages sent
                 0  messages received
                 0  signals received
                 0  voluntary context switches
                32  involuntary context switches

  FreeBSD-8-STABLE-amd64/Core i5-2400
        % gcc -DQSORT -W -Wall -O2 benchmark.c
        % /usr/bin/time -l env LC_ALL=C ./a.out 1e7.txt > /dev/null
                6.41 real         6.21 user         0.19 sys
            185300  maximum resident set size
                 8  average shared memory size
              1020  average unshared data size
               128  average unshared stack size
             72113  page reclaims
                 0  page faults
                 0  swaps
                 0  block input operations
                 0  block output operations
                 0  messages sent
                 0  messages received
                 0  signals received
                 1  voluntary context switches
                72  involuntary context switches
        % gcc -DMERGESORT -W -Wall -O2 benchmark.c
        % /usr/bin/time -l env LC_ALL=C ./a.out 1e7.txt > /dev/null
                4.86 real         4.69 user         0.16 sys
            238220  maximum resident set size
                 8  average shared memory size
              1021  average unshared data size
               128  average unshared stack size
             91645  page reclaims
                 0  page faults
                 0  swaps
                 0  block input operations
                 0  block output operations
                 0  messages sent
                 0  messages received
                 0  signals received
                 1  voluntary context switches
                66  involuntary context switches
        % gcc -DHEAPSORT -W -Wall -O2 benchmark.c
        % /usr/bin/time -l env LC_ALL=C ./a.out 1e7.txt > /dev/null
               10.31 real        10.09 user         0.21 sys
            196488  maximum resident set size
                 7  average shared memory size
              1018  average unshared data size
               127  average unshared stack size
             72114  page reclaims
                 0  page faults
                 0  swaps
                 0  block input operations
                 0  block output operations
                 0  messages sent
                 0  messages received
                 0  signals received
                 1  voluntary context switches
               263  involuntary context switches
        % gcc -DRADIXSORT -W -Wall -O2 benchmark.c
        % /usr/bin/time -l env LC_ALL=C ./a.out 1e7.txt > /dev/null
                7.46 real         7.25 user         0.21 sys
            238240  maximum resident set size
                 8  average shared memory size
              1018  average unshared data size
               128  average unshared stack size
             91650  page reclaims
                 0  page faults
                 0  swaps
                 0  block input operations
                 0  block output operations
                 0  messages sent
                 0  messages received
                 0  signals received
                 2  voluntary context switches
               115  involuntary context switches
        % gcc -DSRADIXSORT -W -Wall -O2 benchmark.c
        % /usr/bin/time -l env LC_ALL=C ./a.out 1e7.txt > /dev/null
                7.64 real         7.38 user         0.25 sys
            238240  maximum resident set size
                 8  average shared memory size
              1021  average unshared data size
               128  average unshared stack size
             91650  page reclaims
                 0  page faults
                 0  swaps
                 0  block input operations
                 0  block output operations
                 0  messages sent
                 0  messages received
                 0  signals received
                 2  voluntary context switches
               119  involuntary context switches
        % gcc -W -Wall -O2 benchmark.c
        % /usr/bin/time -l env LC_ALL=C ./a.out 1e7.txt > /dev/null
                9.41 real         9.20 user         0.21 sys
            316512  maximum resident set size
                 8  average shared memory size
              1020  average unshared data size
               128  average unshared stack size
            111185  page reclaims
                 0  page faults
                 0  swaps
                 0  block input operations
                 0  block output operations
                 0  messages sent
                 0  messages received
                 0  signals received
                 1  voluntary context switches
               219  involuntary context switches

RETURN VALUES
    The bucketsort() function returns the value 0 if successful; otherwise
    the value -1 is returned and the global variable errno is set to
    indicate the error.

ERRORS
  ENOMEM
    When "bucketsort()" fails to allocate the memory needed to build the
    list, which is exactly twice the size of the original array since each
    element takes two pointers.

SEE ALSO
    sort(3), qsort(3), megesort(3), heapsort(3), radixsort(3)

    <http://en.wikipedia.org/wiki/Bucket_sort>

